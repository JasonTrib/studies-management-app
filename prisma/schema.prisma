generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
  // url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  role       Role
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  dep_id     String     @db.VarChar(4)
  department Department @relation(fields: [dep_id], references: [title_id], onDelete: Cascade, onUpdate: Cascade)

  password          Password?
  profile           Profile?
  registrar         Registrar?
  professor         Professor?
  student           Student?
  userAnnouncements UserAnnouncement[]
}

model Password {
  hash       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Profile {
  id         Int      @id @default(autoincrement())
  email      String?  @unique
  fullname   String?
  gender     Gender?
  phone      String?
  info       String?
  avatar     String?
  is_public  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Department {
  title_id    String  @id @db.VarChar(4)
  full_title  String
  description String?

  Users   User[]
  Courses Course[]
}

model Registrar {
  id    Int    @id @default(autoincrement())
  title String

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Professor {
  id    Int    @id @default(autoincrement())
  title String

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  professorCourse ProfessorCourse[]
}

model Student {
  id              Int           @id @default(autoincrement())
  enrollment_year Int
  studies_status  StudiesStatus @default(UNDERGRADUATE)

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  studentCourses StudentCourse[]
}

model StudentCourse {
  student_id   Int
  course_id    Int
  grade        Float?
  is_enrolled  Boolean
  is_following Boolean

  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course  Course  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([student_id, course_id])
}

model ProfessorCourse {
  prof_id      Int
  course_id    Int
  is_lecturing Boolean
  is_following Boolean

  professor Professor @relation(fields: [prof_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course    Course    @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([prof_id, course_id])
}

model Course {
  id              Int      @id @default(autoincrement())
  title           String   @unique
  description     String?  @db.VarChar(2000)
  semester        String
  is_elective     Boolean
  is_postgraduate Boolean
  is_public       Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  dep_id     String     @db.VarChar(4)
  department Department @relation(fields: [dep_id], references: [title_id], onDelete: Cascade, onUpdate: Cascade)

  professorCourses ProfessorCourse[]
  studentCourses   StudentCourse[]
  announcements    Announcement[]
}

model Announcement {
  id         Int      @id @default(autoincrement())
  title      String
  body       String   @db.VarChar(2000)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  course_id Int
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userAnnouncements UserAnnouncement[]
}

model UserAnnouncement {
  id              Int     @id @default(autoincrement())
  announcement_id Int
  user_id         Int?
  has_posted      Boolean @default(false)
  has_seen        Boolean @default(false)

  announcement Announcement @relation(fields: [announcement_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User?        @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

enum Role {
  SUPERADMIN
  REGISTRAR
  PROFESSOR
  STUDENT
}

enum Gender {
  M
  F
}

enum StudiesStatus {
  UNDERGRADUATE
  POSTGRADUATE
  ALUM
}
