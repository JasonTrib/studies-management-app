generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
  // url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  role       Role
  username   String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  password  Password?
  profile   Profile?
  registrar Registrar?
  professor Professor?
  student   Student?
}

model Password {
  hash       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Profile {
  id         Int      @id @default(autoincrement())
  email      String?  @unique
  name       String?
  surname    String?
  gender     Gender?
  phone      String?
  info       String?
  avatar     String?
  is_public  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Registrar {
  id         Int        @id @default(autoincrement())
  title      String
  department Department

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Professor {
  id         Int        @id @default(autoincrement())
  title      String
  department Department

  courses Course[]

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Student {
  id              Int           @id @default(autoincrement())
  department      Department
  enrollment_year Int
  studies_status  StudiesStatus @default(UNDERGRADUATE)

  studentCourses StudentCourse[]

  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model StudentCourse {
  student_id   Int
  course_id    Int
  grade        Float?
  is_enrolled  Boolean
  is_following Boolean

  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course  Course  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([student_id, course_id])
}

model Course {
  id              Int      @id @default(autoincrement())
  title           String   @unique
  description     String?  @db.VarChar(2000)
  semester        String
  department      String
  is_elective     Boolean
  is_postgraduate Boolean
  is_public       Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  studentCourses      StudentCourse[]
  courseAnnouncements CourseAnnouncement[]

  professor_id Int?
  professor    Professor? @relation(fields: [professor_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model CourseAnnouncement {
  id         Int      @id @default(autoincrement())
  title      String
  body       String?  @db.VarChar(2000)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  course_id Int
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  SUPERADMIN
  REGISTRAR
  PROFESSOR
  STUDENT
}

enum Gender {
  M
  F
}

enum Department {
  IT
  GEO
}

enum StudiesStatus {
  UNDERGRADUATE
  POSTGRADUATE
  ALUM
}
